<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>order</artifactId>
        <groupId>cn.lframe</groupId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>order-server</artifactId>

    <dependencies>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

        <!--解析前端传递过来的json数据格式-->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>

        <dependency>
            <groupId>cn.lframe</groupId>
            <artifactId>product-client</artifactId>
        </dependency>
        <!--下面的spring-cloud-starter-config是作为config-server的client端-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-config</artifactId>
        </dependency>


        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-stream</artifactId>
        </dependency>

        <!--下面这个是Spring cloud Stream支持的binder之一rabbitMQ的依赖，其binder还支持kafka-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-stream-rabbit</artifactId>
        </dependency>
        <!--**********************************************************-->
        <!--下面这三个是在config-client端进行自动拉取config-server端从远端Git拉取的
            配置的所必须的依赖-->
        <!--下面是需要连接到rabbitMQ添加的依赖-->
        <!--<dependency>-->
        <!--<groupId>org.springframework.cloud</groupId>-->
        <!--<artifactId>spring-boot-starter-amqp</artifactId>-->
        <!--</dependency>-->
        <!--下面这个依赖包含了spring-boot-starter-amqp-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-bus-amqp</artifactId>
        </dependency>

        <!--下面这个配置主要用于配置客户端重试-->
        <!--如果您希望应用程序启动时配置服务器可能偶尔不可用，那么可以让它在发生故障后继续尝试。首先，你需要设置spring.cloud.config.fail-fast=true。
        然后你需要添加spring-retry和spring-boot-starter-aop to your classpath.
        The default behavior is to retry six times with an initial backoff interval of 1000ms and an exponential multiplier of 1.1 for subsequent backoffs.
         You can configure these properties (and others) by setting the spring.cloud.config.retry.* configuration properties.
        要完全控制重试行为，请添加ID为@Bean的类型。Spring Retry有一个支持创建一个。RetryOperationsInterceptorconfigServerRetryInterceptorRetryInterceptorBuilder-->
        <dependency>
            <groupId>org.springframework.retry</groupId>
            <artifactId>spring-retry</artifactId>
        </dependency>
        <!--下面这个依赖的英文解释-->
        <!--To enable the Hystrix metrics stream, include a dependency on spring-boot-starter-actuator.
        Doing so exposes the /hystrix.stream as a management endpoint, -->
        <!--下面这个依赖的中文解释-->
        <!--要启用Hystrix度量标准流，请包含依赖项spring-boot-starter-actuator。
        这样做会暴露/hystrix.stream为管理端点-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!--**********************************************************-->

        <!--添加hystrix依赖-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
        </dependency>

        <!--添加dashboard可视化界面-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId>
        </dependency>

        <!--服务追踪链路监控的依赖-->
        <!--<dependency>-->
            <!--<groupId>org.springframework.cloud</groupId>-->
            <!--<artifactId>spring-cloud-starter-sleuth</artifactId>-->
        <!--</dependency>-->

        <!--<dependency>-->
            <!--<groupId>org.springframework.cloud</groupId>-->
            <!--<artifactId>spring-cloud-sleuth-zipkin</artifactId>-->
        <!--</dependency>-->
        <!--下面这个依赖包含了spring-cloud-sleuth-zipkin和spring-cloud-starter-sleuth，所以不需要添加这个依赖了-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-zipkin</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>